/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

/**
 *
 * @author Thomas
 */
import Ibutton.DeviceHandler.DeviceReader;
import Ibutton.DeviceHandler.Hygrochron;
import Ibutton.DeviceHandler.Thermochron;
import com.dalsemi.onewire.OneWireException;
import com.dalsemi.onewire.adapter.OneWireIOException;
import com.dalsemi.onewire.container.OneWireContainer;
import com.dalsemi.onewire.container.OneWireContainer01;
import com.dalsemi.onewire.container.OneWireContainer41;
import java.awt.Graphics;
import java.awt.Label;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

public class StartWindow extends javax.swing.JFrame {

    private DeviceReader device;
    private boolean HYGROCHRON = false;
    private Hygrochron hygrochron;
    private Thermochron thermochron;
    private RealTime realtime;
    private String path = System.getProperty("user.dir")+"\\Mission\\";
    private DefaultListModel listModel;
    private File directory;
    private File files;
    private BufferedImage image;
    private Graphics drawImage;

    private class RealTime implements MouseListener {

        private String path;
        private String title;

        public RealTime(String path, String title) {
            this.path = path;
            this.title = title;
        }

        public void mouseClicked(MouseEvent e) {
            if (HYGROCHRON) {
                try {

                    new RealTimeMonitor(hygrochron, path, title);
                } catch (Exception ex) {
                    Box.Message("There seems to be a problem with rendering of realtime, press refresh and try again.");
                }
            } else {
                try {
                    new RealTimeMonitor(thermochron, path, title);
                } catch (Exception ex) {
                    Box.Message("There seems to be a problem with rendering of realtime, press refresh and try again.");
                }
            }
        }

        public void mousePressed(MouseEvent e) {
        }

        public void mouseReleased(MouseEvent e) {
        }

        public void mouseEntered(MouseEvent e) {
        }

        public void mouseExited(MouseEvent e) {
        }
    }

    /**
     * Creates new form StartWindow
     */
    public StartWindow() throws OneWireIOException, OneWireException {
        initComponents();
        readDevices();
        customGraph_btn.setVisible(false);
        makeList();
    }

    /*
     * reads devices connected to the computer
     */
    private void readDevices() throws OneWireIOException, OneWireException {
        device = new DeviceReader();
    }

    /*
     * Populates the list and shows connected devices
     */
    private void makeList() {
        DefaultListModel listModel = new DefaultListModel();
        //listModel.addElement(device);

        for (OneWireContainer owc : device.getDevices()) {
            listModel.addElement(owc);
        }
        buttonList.setModel(listModel);
    }

    /*
     * Displays information about selected device
     */
    private void displayDeviceInformation(OneWireContainer owc) throws OneWireException, IOException {
        if (owc.getAlternateNames().equals("Hygrochron")) {
            dataLogging.setVisible(true);
            dataLoggingText.setVisible(true);
            dataHighAlarm.setVisible(true);
            dataHighAlarmText.setVisible(true);
            dataLowAlarm.setVisible(true);
            dataLowAlarmText.setVisible(true);
            hygrochron = new Hygrochron(owc);
            HYGROCHRON = true;
            adressText.setText(hygrochron.getAdress());
            alternativeNameText.setText(hygrochron.getAlternativeName());
            nameText.setText(hygrochron.getName());
            descriptionText.setText(hygrochron.getDescription());
            String[] info = hygrochron.getMissionInformationArray();
            missionRunningText.setText(info[0]);
            sutaEnabledText.setText(info[1]);
            sampleRateText.setText(info[2]);
            if (info[3].equals("30.11.1999_00:00:00")) {
                missionStartText.setText("No data recorded yet.");
            } else {
                missionStartText.setText(info[3]);
            }
            sampleCountText.setText(info[4]);
            rolloverEnabledText.setText(info[5]);
            if (info[6].equals("30.11.1999_00:00:00")) {
                firstSampleText.setText("No data recorded yet.");
            } else {
                firstSampleText.setText(info[6]);
            }
            totalDeviceSamplesText.setText(info[7]);
            tempHighAlarmText.setText(info[9]);
            tempLowAlarmText.setText(info[10]);
            dataLoggingText.setText(info[11]);
            dataHighAlarmText.setText(info[12]);
            dataLowAlarmText.setText(info[13]);
        } else {
            dataLogging.setVisible(false);
            dataLoggingText.setVisible(false);
            dataHighAlarm.setVisible(false);
            dataHighAlarmText.setVisible(false);
            dataLowAlarm.setVisible(false);
            dataLowAlarmText.setVisible(false);
            thermochron = new Thermochron(owc);
            HYGROCHRON = false;
            adressText.setText(thermochron.getAdress());
            alternativeNameText.setText(thermochron.getAlternativeName());
            nameText.setText(thermochron.getName());
            descriptionText.setText(thermochron.getDescription());
            String[] info = thermochron.getMissionInformationArray();
            missionRunningText.setText(info[0]);
            sutaEnabledText.setText(info[1]);
            sampleRateText.setText(info[2]);
            if (info[3].equals("30.11.1999_00:00:00")) {
                missionStartText.setText("No data recorded yet.");
            } else {
                missionStartText.setText(info[3]);
            }
            sampleCountText.setText(info[4]);
            rolloverEnabledText.setText(info[5]);
            if (info[6].equals("30.11.1999_00:00:00")) {
                firstSampleText.setText("No data recorded yet.");
            } else {
                firstSampleText.setText(info[6]);
            }
            totalDeviceSamplesText.setText(info[7]);
            tempHighAlarmText.setText(info[9]);
            tempLowAlarmText.setText(info[10]);
            dataLoggingText.setText(info[11]);
            dataHighAlarmText.setText(info[12]);
            dataLowAlarmText.setText(info[13]);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        mainPanel = new javax.swing.JPanel();
        missionStatusLabel = new javax.swing.JLabel();
        missionRunningLabel = new javax.swing.JLabel();
        sutaEnabled = new javax.swing.JLabel();
        sampleRate = new javax.swing.JLabel();
        rolloverEnabled = new javax.swing.JLabel();
        firstSample = new javax.swing.JLabel();
        totalDeviceSamples = new javax.swing.JLabel();
        tempHighAlarm = new javax.swing.JLabel();
        tempLowAlarm = new javax.swing.JLabel();
        dataLogging = new javax.swing.JLabel();
        dataHighAlarm = new javax.swing.JLabel();
        dataLowAlarm = new javax.swing.JLabel();
        missionRunningText = new javax.swing.JTextField();
        sutaEnabledText = new javax.swing.JTextField();
        sampleRateText = new javax.swing.JTextField();
        rolloverEnabledText = new javax.swing.JTextField();
        firstSampleText = new javax.swing.JTextField();
        totalDeviceSamplesText = new javax.swing.JTextField();
        tempHighAlarmText = new javax.swing.JTextField();
        tempLowAlarmText = new javax.swing.JTextField();
        dataLoggingText = new javax.swing.JTextField();
        dataHighAlarmText = new javax.swing.JTextField();
        dataLowAlarmText = new javax.swing.JTextField();
        newMissionButton = new javax.swing.JButton();
        newMissionLabel = new javax.swing.JLabel();
        sampleCountLabel = new javax.swing.JLabel();
        sampleCountText = new javax.swing.JTextField();
        missionStartLabel = new javax.swing.JLabel();
        missionStartText = new javax.swing.JTextField();
        refreshButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        deleteMissionButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        buttonList = new javax.swing.JList();
        tabPanelHistory = new javax.swing.JTabbedPane();
        tabPanel1 = new javax.swing.JPanel();
        customGraph_btn = new javax.swing.JButton();
        thumb1 = new javax.swing.JLabel();
        thumb2 = new javax.swing.JLabel();
        thumb3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        browseText = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        folderList = new javax.swing.JList();
        showFileButton = new javax.swing.JButton();
        deleteFileButton = new javax.swing.JButton();
        foldersTextLabel = new javax.swing.JLabel();
        filesTextLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList();
        changeFolderButton = new javax.swing.JButton();
        defaultPathButton = new javax.swing.JButton();
        infoPanel = new javax.swing.JPanel();
        fileTextPanel = new javax.swing.JScrollPane();
        fileText = new javax.swing.JTextArea();
        graphPreview = new javax.swing.JLabel();
        selectedDeviceLabel = new javax.swing.JLabel();
        alternativeNameText = new javax.swing.JTextField();
        nameText = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        descriptionText = new javax.swing.JTextArea();
        adressText = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        addressLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hygrochron/Termochron Reader");

        mainPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        missionStatusLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        missionStatusLabel.setText("Current Mission Status:");

        missionRunningLabel.setText("Is mission running:");
        missionRunningLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        sutaEnabled.setText("Is SUTA enabled:");
        sutaEnabled.setToolTipText("Start Upon Temperature Alarm");
        sutaEnabled.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        sampleRate.setText("Sample rate:");
        sampleRate.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        rolloverEnabled.setText("Is Rollover enabled:");
        rolloverEnabled.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        firstSample.setText("First sample:");
        firstSample.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        totalDeviceSamples.setText("Total device samples:");
        totalDeviceSamples.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        tempHighAlarm.setText("Temperature high alarm:");
        tempHighAlarm.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        tempLowAlarm.setText("Temperature low alarm:");
        tempLowAlarm.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        dataLogging.setText("Data logging:");
        dataLogging.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        dataHighAlarm.setText("Data high alarm:");
        dataHighAlarm.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        dataLowAlarm.setText("Data low alarm:");
        dataLowAlarm.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        missionRunningText.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        missionRunningText.setEnabled(false);

        sutaEnabledText.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        sutaEnabledText.setEnabled(false);

        sampleRateText.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        sampleRateText.setEnabled(false);

        rolloverEnabledText.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        rolloverEnabledText.setEnabled(false);

        firstSampleText.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        firstSampleText.setEnabled(false);

        totalDeviceSamplesText.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        totalDeviceSamplesText.setEnabled(false);

        tempHighAlarmText.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        tempHighAlarmText.setEnabled(false);

        tempLowAlarmText.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        tempLowAlarmText.setEnabled(false);

        dataLoggingText.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        dataLoggingText.setEnabled(false);

        dataHighAlarmText.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        dataHighAlarmText.setEnabled(false);

        dataLowAlarmText.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        dataLowAlarmText.setEnabled(false);

        newMissionButton.setText("Create New Mission");
        newMissionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMissionButtonActionPerformed(evt);
            }
        });

        newMissionLabel.setText("New mission:");
        newMissionLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        sampleCountLabel.setText("Sample count:");
        sampleCountLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        sampleCountText.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        sampleCountText.setEnabled(false);

        missionStartLabel.setText("Mission start time:");
        missionStartLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        missionStartText.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        missionStartText.setEnabled(false);

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Delete current mission:");
        jLabel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        deleteMissionButton.setText("Delete current mission");
        deleteMissionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMissionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(missionStatusLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE)
                        .addComponent(refreshButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                            .addComponent(sutaEnabled, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                            .addComponent(sampleRate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                            .addComponent(missionRunningLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                            .addComponent(sampleCountLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(missionStartLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(newMissionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(rolloverEnabled, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(firstSample, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(totalDeviceSamples, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dataLowAlarm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dataHighAlarm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dataLogging, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(tempHighAlarm, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                                    .addComponent(tempLowAlarm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(missionRunningText)
                                .addComponent(sampleRateText, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(sampleCountText, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(missionStartText, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(firstSampleText, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(totalDeviceSamplesText, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tempHighAlarmText, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tempLowAlarmText, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(dataLoggingText, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(dataHighAlarmText, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(dataLowAlarmText, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(rolloverEnabledText, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(sutaEnabledText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(deleteMissionButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(newMissionButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(missionStatusLabel)
                    .addComponent(refreshButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(missionRunningLabel)
                    .addComponent(missionRunningText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sutaEnabled)
                    .addComponent(sutaEnabledText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sampleRate)
                    .addComponent(sampleRateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sampleCountLabel)
                    .addComponent(sampleCountText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(missionStartLabel)
                    .addComponent(missionStartText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rolloverEnabled)
                    .addComponent(rolloverEnabledText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstSample)
                    .addComponent(firstSampleText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalDeviceSamples)
                    .addComponent(totalDeviceSamplesText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tempHighAlarm)
                    .addComponent(tempHighAlarmText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tempLowAlarm)
                    .addComponent(tempLowAlarmText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataLogging)
                    .addComponent(dataLoggingText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataHighAlarm)
                    .addComponent(dataHighAlarmText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataLowAlarm)
                    .addComponent(dataLowAlarmText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newMissionLabel)
                    .addComponent(newMissionButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(deleteMissionButton))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabel1.setText("Select a button from the list below");

        buttonList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(buttonList);

        tabPanelHistory.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabPanelHistoryStateChanged(evt);
            }
        });

        tabPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tabPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabPanel1MouseClicked(evt);
            }
        });

        customGraph_btn.setText("Create Custom Graph");
        customGraph_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customGraph_btnActionPerformed(evt);
            }
        });

        thumb1.setText("jLabel4");

        thumb2.setText("jLabel4");

        thumb3.setText("jLabel4");

        javax.swing.GroupLayout tabPanel1Layout = new javax.swing.GroupLayout(tabPanel1);
        tabPanel1.setLayout(tabPanel1Layout);
        tabPanel1Layout.setHorizontalGroup(
            tabPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customGraph_btn)
                    .addGroup(tabPanel1Layout.createSequentialGroup()
                        .addComponent(thumb1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(thumb3))
                    .addComponent(thumb2))
                .addContainerGap(444, Short.MAX_VALUE))
        );
        tabPanel1Layout.setVerticalGroup(
            tabPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(thumb1)
                    .addComponent(thumb3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(thumb2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 379, Short.MAX_VALUE)
                .addComponent(customGraph_btn)
                .addContainerGap())
        );

        tabPanelHistory.addTab("Graphs", tabPanel1);

        browseText.setFont(new java.awt.Font("Tahoma", 1, 14));
        browseText.setText("Browse previously generated graphs here");

        folderList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                folderListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(folderList);

        showFileButton.setText("Show file");
        showFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showFileButtonActionPerformed(evt);
            }
        });

        deleteFileButton.setText("Delete file");
        deleteFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFileButtonActionPerformed(evt);
            }
        });

        foldersTextLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        foldersTextLabel.setText("Folders");

        filesTextLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        filesTextLabel.setText("Files");

        fileList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileListMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(fileList);

        changeFolderButton.setText("Change Path");
        changeFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeFolderButtonActionPerformed(evt);
            }
        });

        defaultPathButton.setText("Reset default path");
        defaultPathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultPathButtonActionPerformed(evt);
            }
        });

        fileText.setColumns(20);
        fileText.setLineWrap(true);
        fileText.setRows(5);
        fileText.setEnabled(false);
        fileTextPanel.setViewportView(fileText);

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 243, Short.MAX_VALUE)
            .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(infoPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(graphPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(infoPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(fileTextPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(13, Short.MAX_VALUE)))
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 213, Short.MAX_VALUE)
            .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(infoPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(graphPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(54, Short.MAX_VALUE)))
            .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(infoPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(fileTextPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 595, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(browseText)
                            .addGap(0, 287, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                                .addComponent(foldersTextLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(changeFolderButton, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                                    .addGap(18, 18, 18)
                                    .addComponent(defaultPathButton)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(filesTextLabel)
                                        .addComponent(showFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(deleteFileButton))
                                    .addGap(0, 241, Short.MAX_VALUE)))))
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 462, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(browseText)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(foldersTextLabel)
                        .addComponent(filesTextLabel))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(changeFolderButton)
                                .addComponent(defaultPathButton))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addGap(0, 148, Short.MAX_VALUE)
                            .addComponent(deleteFileButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(showFileButton)
                            .addGap(13, 13, 13)))
                    .addContainerGap()))
        );

        tabPanelHistory.addTab("History", jPanel1);

        selectedDeviceLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        selectedDeviceLabel.setText("Information on selected device");

        alternativeNameText.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        alternativeNameText.setEnabled(false);

        nameText.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        nameText.setEnabled(false);

        descriptionText.setColumns(5);
        descriptionText.setLineWrap(true);
        descriptionText.setRows(5);
        descriptionText.setWrapStyleWord(true);
        descriptionText.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        descriptionText.setEnabled(false);
        jScrollPane2.setViewportView(descriptionText);

        adressText.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        adressText.setEnabled(false);

        nameLabel.setText("Name:");
        nameLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        addressLabel.setText("Address: ");
        addressLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel2.setText("Alternative name:");
        jLabel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jMenu1.setText("File");

        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("About");

        jMenuItem1.setText("About");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(tabPanelHistory, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE))
                                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(selectedDeviceLabel)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                                            .addComponent(addressLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(nameText)
                                            .addComponent(alternativeNameText)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(adressText, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE)))))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(selectedDeviceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(alternativeNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(nameLabel))
                            .addGap(6, 6, 6)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(adressText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(addressLabel))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabPanelHistory, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                    .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newMissionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMissionButtonActionPerformed

        try {
            if (HYGROCHRON) {
                System.out.println(hygrochron.getAlternativeName());
                new Mission(hygrochron);
            } else {
                System.out.println(thermochron.getAlternativeName());
                new Mission(thermochron);
            }
        } catch (Exception ex) {
            Box.Message("There seems to be a problem with setting up a new mission, try to reconnect the device to the USB.");
        }
    }//GEN-LAST:event_newMissionButtonActionPerformed

    /*
     * Listener for when user selects from buttonList
     */
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:

        try {
            displayDeviceInformation((OneWireContainer) buttonList.getSelectedValue());
            generateGraphThumbnail();
        } catch (OneWireException ex) {
            Logger.getLogger(StartWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(StartWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_refreshButtonActionPerformed

    private void deleteMissionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMissionButtonActionPerformed

        if (Box.Confirm("Are you sure you want to delete the current mission?", "Delete Mission?") == Box.YES) {
            if (HYGROCHRON) {
                try {
                    hygrochron.deleteMemory();
                    displayDeviceInformation((OneWireContainer) buttonList.getSelectedValue());
                } catch (OneWireException ex) {
                    Logger.getLogger(StartWindow.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(StartWindow.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                }
            } else {
                try {
                    thermochron.deleteMemory();
                    displayDeviceInformation((OneWireContainer) buttonList.getSelectedValue());
                } catch (OneWireException ex) {
                    Logger.getLogger(StartWindow.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(StartWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_deleteMissionButtonActionPerformed

    private void buttonListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonListMouseClicked
        // TODO add your handling code here:

        try {

            displayDeviceInformation((OneWireContainer) buttonList.getSelectedValue());
            generateGraphThumbnail();
        } catch (OneWireException ex) {
            Logger.getLogger(StartWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(StartWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonListMouseClicked

    private void clearThumb() {
        thumb1.setIcon(null);
        thumb2.setIcon(null);
        thumb3.setIcon(null);
        thumb1.setText("");
        thumb2.setText("");
        thumb3.setText("");
    }

    private void generateGraphThumbnail() {
        int width = 250;
        int height = 250;
        clearThumb();
        customGraph_btn.setVisible(true);
        if (HYGROCHRON) {

            thumb2.setVisible(true);
            thumb3.setVisible(true);

            try {
                hygrochron.generateGraph();
            } catch (Exception ex) {
                thumb1.setText("No graphs found, is the mission setup?");
            }
            thumb1.removeMouseListener(realtime);
            try {
                thumb1.setIcon(getThumbnail(hygrochron.TEMPERATURE_GRAPH_NAME, width, height));
                realtime = new RealTime(hygrochron.TEMPERATURE_GRAPH_NAME, "Temperature");
                thumb1.addMouseListener(realtime);

                thumb2.removeMouseListener(realtime);
                thumb2.setIcon(getThumbnail(hygrochron.HUMIDITY_GRAPH_NAME, width, height));
                realtime = new RealTime(hygrochron.HUMIDITY_GRAPH_NAME, "Humidity");
                thumb2.addMouseListener(realtime);

                thumb3.removeMouseListener(realtime);
                thumb3.setIcon(getThumbnail(hygrochron.TEMP_HUM_GRAPH_NAME, width, height));
                realtime = new RealTime(hygrochron.TEMP_HUM_GRAPH_NAME, "Temperature and humidity");
                thumb3.addMouseListener(realtime);
            } catch (IOException ex) {
                thumb1.setText("No graphs found, try to press refresh.");
            } catch (NullPointerException ne) {
                thumb1.setText("No graphs found, is the mission setup?");
            }

        } else {
            tabPanel1.add(new Label("HIASDASDASDASDASDASDddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"));

            tabPanel1.validate();
            thumb2.setVisible(false);
            thumb3.setVisible(false);
            try {
                thermochron.generateGraph();
            } catch (Exception ex) {
                thumb1.setText("No graphs found, is the mission setup?");
            }

            try {
                thumb1.removeMouseListener(realtime);
                thumb1.setIcon(getThumbnail(thermochron.TEMPERATURE_GRAPH_NAME, width, height));
                realtime = new RealTime(thermochron.TEMPERATURE_GRAPH_NAME, "Temperature");
                thumb1.addMouseListener(realtime);
            } catch (IOException ex) {
                thumb1.setText("No graphs found, try to press refresh.");
            } catch (NullPointerException ne) {
                thumb1.setText("No graphs found, is the mission setup?");
            }

        }
    }

    private ImageIcon getThumbnail(String imagepath, int height, int width) throws IOException {
        ImageScaler scaler = new ImageScaler();
        BufferedImage image = null;
        image = ImageIO.read(new File(imagepath));
        return scaler.getImage(width, width, image);

    }
    private void customGraph_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customGraph_btnActionPerformed
        if (HYGROCHRON) {
            try {
                new GraphViewer(hygrochron);
            } catch (Exception ex) {
                Box.Message("There seems to be a problem displaying the graphs, are you sure the mission is setup?");
            }
        } else {
            try {
                new GraphViewer(thermochron);
            } catch (Exception ex) {
                Box.Message("There seems to be a problem displaying the graphs, are you sure the mission is setup?");
            }
        }
    }//GEN-LAST:event_customGraph_btnActionPerformed

    private void tabPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabPanel1MouseClicked
    }//GEN-LAST:event_tabPanel1MouseClicked

    private void tabPanelHistoryStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabPanelHistoryStateChanged
    }//GEN-LAST:event_tabPanelHistoryStateChanged

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        Box.Message("Hygrochron and temperature reader..\n Written by Thomas and Freddy @ Hogskolen in Ostfold, Norway. ");
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void folderListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_folderListMouseClicked

        
		String folder = (String) folderList.getSelectedValue();
		showFiles(folder);
	}//GEN-LAST:event_folderListMouseClicked
		
        private void showFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showFileButtonActionPerformed

        String folder = (String) folderList.getSelectedValue() + "\\";
		String file = (String) fileList.getSelectedValue();
		String fullPath = folder + file;
		if (fullPath.contains(".dat")) {
		try {                 
		JTextArea displayFile = new JTextArea(20, 60);
		displayFile.read(new FileReader(this.path + fullPath), null);
		displayFile.setEditable(false);
		JOptionPane.showMessageDialog(null, new JScrollPane(displayFile));
		} 
		catch (IOException ioe)
		{             }        
		} 
		else {             
		final ImageIcon image = new ImageIcon(this.path + fullPath);
		JOptionPane.showMessageDialog(null, image, "Graph", JOptionPane.INFORMATION_MESSAGE, null);
		}     
	}//GEN-LAST:event_showFileButtonActionPerformed
		
        private void deleteFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFileButtonActionPerformed
String folder = (String) folderList.getSelectedValue() + "\\";
         String file = (String) fileList.getSelectedValue();
         String fullPath = folder + file;
         int n = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the selected file?", "Delete File?", JOptionPane.YES_NO_OPTION);
         if (n == 0)
		 {             File delFile = new File(this.path + fullPath);
		 delFile.delete();
		 showFiles(folder);
         }     
	}//GEN-LAST:event_deleteFileButtonActionPerformed

        private void fileListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileListMouseClicked

        String folder = (String) folderList.getSelectedValue() + "\\";
		String file = (String) fileList.getSelectedValue();
		String fullPath = folder + file;
		try {             previewFile(fullPath);
		} catch (IOException ex) {             Logger.getLogger(BrowseFiles.class.getName()).log(Level.SEVERE, null, ex);         }
	}//GEN-LAST:event_fileListMouseClicked

        private void changeFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeFolderButtonActionPerformed
		

        int n = JOptionPane.showConfirmDialog(null, "Are you sure you want to change path?", "Warning! Really change path?", JOptionPane.YES_NO_OPTION);
		if (n == 0) {             
		String newFolder = "";             JFileChooser fileChoose = new JFileChooser();
		fileChoose.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); 
		if (fileChoose.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
		{                 newFolder = fileChoose.getSelectedFile().toString();

		}
		System.out.println(this.path); 
		System.out.println(newFolder);
		this.path = newFolder + "\\"; 
		showFolders();         }     
	}//GEN-LAST:event_changeFolderButtonActionPerformed

        private void defaultPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultPathButtonActionPerformed

        this.path = System.getProperty("user.dir")+"\\Mission\\";         
        showFolders();     
		}//GEN-LAST:event_defaultPathButtonActionPerformed
        private void showFolders()
    {
        listModel = new DefaultListModel();
        directory = new File(this.path);
        String[] children = directory.list();
        for (int i=0; i<children.length; i++) {
            listModel.addElement(children[i]);
        }
        folderList.setModel(listModel);
    }
    
    private void showFiles(String folder)
    {
        listModel = new DefaultListModel();
        files = new File(this.path+folder+"\\");
        String[] children = files.list();
        for (int i=0; i<children.length; i++) {
            listModel.addElement(children[i]);
        }
        fileList.setModel(listModel);
    }
    private void previewFile(String file) throws IOException {
        ImageScaler scaleImage = new ImageScaler();
        if(file.contains(".dat"))
        {
            //fileTextPanel.setLocation(0, 250);
            //fileText.setLocation(graphPreview.getLocation());
                    
            graphPreview.setVisible(false);
            fileTextPanel.setVisible(true);
            fileText.setVisible(true);
            BufferedReader br = new BufferedReader(new FileReader(new File(this.path+file)));

            String s = null;
            String tmp = null;
            while((s = br.readLine()) != null){
                tmp += s+"\n\r";
            }
            br.close();
            fileText.setText(tmp);
           }
        else
        {
            fileTextPanel.setVisible(false);
            fileText.setVisible(false);
            graphPreview.setVisible(true);
            image = ImageIO.read(new File(this.path+file));
            graphPreview.setIcon(scaleImage.getImage(250, 250, image));
        }
    }
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StartWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StartWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StartWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StartWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    new StartWindow().setVisible(true);
                } catch (OneWireIOException ex) {
                    Logger.getLogger(StartWindow.class.getName()).log(Level.SEVERE, null, ex);
                } catch (OneWireException ex) {
                    Logger.getLogger(StartWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addressLabel;
    private javax.swing.JTextField adressText;
    private javax.swing.JTextField alternativeNameText;
    private javax.swing.JLabel browseText;
    private javax.swing.JList buttonList;
    private javax.swing.JButton changeFolderButton;
    private javax.swing.JButton customGraph_btn;
    private javax.swing.JLabel dataHighAlarm;
    private javax.swing.JTextField dataHighAlarmText;
    private javax.swing.JLabel dataLogging;
    private javax.swing.JTextField dataLoggingText;
    private javax.swing.JLabel dataLowAlarm;
    private javax.swing.JTextField dataLowAlarmText;
    private javax.swing.JButton defaultPathButton;
    private javax.swing.JButton deleteFileButton;
    private javax.swing.JButton deleteMissionButton;
    private javax.swing.JTextArea descriptionText;
    private javax.swing.JList fileList;
    private javax.swing.JTextArea fileText;
    private javax.swing.JScrollPane fileTextPanel;
    private javax.swing.JLabel filesTextLabel;
    private javax.swing.JLabel firstSample;
    private javax.swing.JTextField firstSampleText;
    private javax.swing.JList folderList;
    private javax.swing.JLabel foldersTextLabel;
    private javax.swing.JLabel graphPreview;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel missionRunningLabel;
    private javax.swing.JTextField missionRunningText;
    private javax.swing.JLabel missionStartLabel;
    private javax.swing.JTextField missionStartText;
    private javax.swing.JLabel missionStatusLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JButton newMissionButton;
    private javax.swing.JLabel newMissionLabel;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel rolloverEnabled;
    private javax.swing.JTextField rolloverEnabledText;
    private javax.swing.JLabel sampleCountLabel;
    private javax.swing.JTextField sampleCountText;
    private javax.swing.JLabel sampleRate;
    private javax.swing.JTextField sampleRateText;
    private javax.swing.JLabel selectedDeviceLabel;
    private javax.swing.JButton showFileButton;
    private javax.swing.JLabel sutaEnabled;
    private javax.swing.JTextField sutaEnabledText;
    private javax.swing.JPanel tabPanel1;
    private javax.swing.JTabbedPane tabPanelHistory;
    private javax.swing.JLabel tempHighAlarm;
    private javax.swing.JTextField tempHighAlarmText;
    private javax.swing.JLabel tempLowAlarm;
    private javax.swing.JTextField tempLowAlarmText;
    private javax.swing.JLabel thumb1;
    private javax.swing.JLabel thumb2;
    private javax.swing.JLabel thumb3;
    private javax.swing.JLabel totalDeviceSamples;
    private javax.swing.JTextField totalDeviceSamplesText;
    // End of variables declaration//GEN-END:variables
}
