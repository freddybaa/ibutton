/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package Ibutton.DeviceHandler;

import Ibutton.Result.HumidityResult;
import Ibutton.Result.TemperatureResult;
import com.dalsemi.onewire.OneWireAccessProvider;
import com.dalsemi.onewire.OneWireException;
import com.dalsemi.onewire.adapter.DSPortAdapter;
import com.dalsemi.onewire.adapter.OneWireIOException;
import com.dalsemi.onewire.container.ADContainer;
import com.dalsemi.onewire.container.OneWireContainer;
import com.dalsemi.onewire.container.OneWireContainer41;
import com.dalsemi.onewire.container.TemperatureContainer;
import com.dalsemi.onewire.utils.Convert;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Baardsen
 */
public abstract class Device implements Ibutton.Interface.Convert, IDevice{
   
    /**
     * Container for Hydrochron and Thermochron
     */
    public OneWireContainer41 owc;

    private String name;
    private String alternateName;
    private String description;

    private boolean rollover = false;
  
    /**
     * Taking a OneWireContainer as parameter.
     * @param con OneWireContainer
     * @throws OneWireException
     */
    public Device(OneWireContainer con) throws OneWireException{
        
            owc = (OneWireContainer41)con;
            this.name = owc.getName();
            this.alternateName = owc.getAlternateNames();
            this.description = owc.getDescription();
            loadMission();
            
    }


    /**
     * Getting the mission information from the device
     * @return String
     * @throws OneWireException
     */
    public abstract String getMissionInformation() throws OneWireException;
    /**
     * Trying to read the temperatures from the device.
     * @throws OneWireException
     */
    public abstract void readTemperatures() throws OneWireException;
    /**
     * Setting the alarm to go of when a high temperature is reached.
     * @param alarmHigh Double
     * @throws OneWireException
     */
    public abstract void setTemperatureAlarmHigh( double alarmHigh) throws OneWireException;
    /**
     * Setting the alarm to go of when a low temperature is reached.
     * @param alarmLow Double
     * @throws OneWireException
     */
    public abstract void setTemperatureAlarmLow(double alarmLow) throws OneWireException;
    /**
     * Returning all the temperatues found.
     * @return ArrayList<Temperature>
     */
    public abstract ArrayList<TemperatureResult> getTemperatures();


    /**
     * Getting the adress 
     * @return String
     */
    public String getAdress(){ return this.owc.getAddressAsString();}
    /**
     * Getting the device description
     * @return String
     */
    public String getDescription(){ return this.description; }
    /**
     * Getting the device name
     * @return String
     */
    public String getName(){ return this.name; }
   /**
    * Getting the device alternativename
    * @return String
    */
    public String getAlternativeName(){ return this.alternateName; }

    /**
     * Converting the time in miliseconds to a date.
     * @param miliseconds Long
     * @return String
     */
    public String convertDate(long miliseconds){
        DateFormat format = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(miliseconds);
        return format.format(calendar.getTime());
    }

    /**
     * Delete everything on the device before starting a new mission
     * @param state
     */
    public void setRollover(boolean state){
        this.rollover = state;
    }

    /**
     * Checks wether a mission is running on the device.
     * @return boolean
     * @throws OneWireException
     */
    public boolean isMissionRunning() throws OneWireException{
        return owc.isMissionRunning();
    }

    /**
     * Getting the current sample count on the device
     * @return int
     * @throws OneWireException
     */
    public int getSampleCount() throws OneWireException{
        return owc.getMissionSampleCount(0);
    }

    /**
     * Deleting everything stored on the device.
     * @throws OneWireException
     */
    public void deleteMemory() throws OneWireException{
        loadMission();
        owc.clearMemory();
        owc.clearMissionResults();
    }

    /**
     * Starting a new mission when the alarm temperatures are reached.
     * @param alarmHigh double
     * @param alarmLow double
     * @param sampleRate int
     * @param startDelay int
     * @throws OneWireException
     */
    public void startMissionUponTemperature(double alarmHigh, double alarmLow, int sampleRate, int startDelay) throws OneWireException{
        if(alarmHigh!=-1 && alarmLow !=-1){
            //this.startUponTemperatureAlarm = true;
            owc.setStartUponTemperatureAlarmEnable(true);
            startMission(sampleRate, startDelay);
        }
    }
    /**
     * Setting up a new mission on the device.
     * @param sampleRate
     * @param startDelay
     * @throws OneWireException
     */
    public void startMission(int sampleRate, int startDelay) throws OneWireException{
        stopMission();
        owc.startNewMission(sampleRate, startDelay, this.rollover, true, new boolean[]{true, true});
         

    }

    /**
     * Stopping the current mission on the device
     * @throws OneWireException
     */
    public void stopMission() throws OneWireException{
        if(owc.isMissionRunning()){
            owc.stopMission();
        }
    }

    /**
     * Loading the current mission the device.
     * @throws OneWireException
     */
    public void loadMission() throws OneWireException{
            //loading mission
            boolean missonLoaded = false;
            while(!missonLoaded){
                owc.loadMissionResults();
                missonLoaded = true;
            }
    }

}
