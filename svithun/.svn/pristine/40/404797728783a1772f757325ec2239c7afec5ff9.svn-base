/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package Ibutton.DeviceHandler;

import Ibutton.Result.TemperatureResult;
import com.dalsemi.onewire.OneWireException;
import com.dalsemi.onewire.container.OneWireContainer;
import com.dalsemi.onewire.container.OneWireContainer41;
import com.dalsemi.onewire.container.TemperatureContainer;
import java.util.ArrayList;

/**
 * Handling communication with device, Thermochron.
 * Can setup new missions, read temperature, set alarm etc
 * @author Baardsen
 */
public class Thermochron extends Device{

    /**
     * Holding temperature readings
     */
    private ArrayList<TemperatureResult> temperatures = new ArrayList<TemperatureResult>();

    /**
     * Takes container as parameter
     * @param container OneWireContainer
     * @throws OneWireException
     */
    public Thermochron(OneWireContainer container) throws OneWireException{
        super(container);
    }

    @Override
    public ArrayList<TemperatureResult> getTemperatures() {
        return this.temperatures;
    }

    @Override
    public String getDescription() {
        return super.getDescription();
    }

    @Override
    public String getName() {
        return super.getName();
    }

    @Override
    public int getSampleCount() throws OneWireException {
        return super.getSampleCount();
    }

    @Override
    public boolean isMissionRunning() throws OneWireException {
        return super.isMissionRunning();
    }

    @Override
    public void setRollover(boolean state) {
        super.setRollover(state);
    }

    @Override
    public String getAlternativeName() {
        return super.getAlternativeName();
    }

    @Override
    public void loadMission() throws OneWireException {
        super.loadMission();
    }

    @Override
    public void startMission(int sampleRate, int startDelay) throws OneWireException {
        super.startMission(sampleRate, startDelay);
    }

    @Override
    public void stopMission() throws OneWireException {
        super.stopMission();
    }

    @Override
    public void startMissionUponTemperature(double alarmHigh, double alarmLow, int sampleRate, int startDelay) throws OneWireException {
        super.startMissionUponTemperature(alarmHigh, alarmLow, sampleRate, startDelay);
    }

    @Override
    public void deleteMemory() throws OneWireException {
        super.deleteMemory();
    }

    /**
      * Getting the mission information setup for the device.
      * @return String
      * @throws OneWireException
      */
    public String getMissionInformation() throws OneWireException{
        loadMission();
        String s = String.format(
                "Mission running: %s\n"+
                "SUTA enabled: %s\n"+
                "Sample rate: %s\n"+
                "Mission start time: %s\n"+
                "Sample count: %s\n"+
                "Rollover enabled: %s\n"+
                "First sample: %s\n"+
                "Total device samples: %s\n"+
                "Temperature logging: %s\n"+
                "Temperature High Alarm: %s\n"+
                "Temperature Low Alarm: %s\n",
                super.owc.isMissionRunning(),
                super.owc.isStartUponTemperatureAlarmEnabled(),
                super.owc.getMissionSampleRate(0),
                super.convertDate(owc.getMissionTimeStamp(0)),
                super.owc.getMissionSampleCount(0),
                super.owc.isMissionRolloverEnabled(),
                super.convertDate(owc.getMissionSampleTimeStamp(0, 0)),
                super.owc.getDeviceSampleCount(),
                super.owc.getMissionResolution(0),
                super.owc.getMissionAlarm(OneWireContainer41.TEMPERATURE_CHANNEL, 1),
                super.owc.getMissionAlarm(OneWireContainer41.TEMPERATURE_CHANNEL, 0)
                );
        return s;
    }
     /**
     * Reading all the temperatures readings on the device.
     * @throws OneWireException
     */
    public void readTemperatures() throws OneWireException{

        if(super.owc.getMissionChannelEnable(OneWireContainer41.DATA_CHANNEL)){

             int sampleCount = super.owc.getMissionSampleCount(OneWireContainer41.TEMPERATURE_CHANNEL);
             for(int i=0;i<sampleCount;i++){
                  temperatures.add(
                          new TemperatureResult(super.owc.getMissionSample(OneWireContainer41.TEMPERATURE_CHANNEL, i),
                                          super.owc.getMissionSampleTimeStamp(OneWireContainer41.TEMPERATURE_CHANNEL, i))
                                          );

             }
        }
    }

    /**
     * Setting the temperature for high values.
     * @param alarmHigh
     * @throws OneWireException
     */
    public void setTemperatureAlarmHigh( double alarmHigh) throws OneWireException{
        if(alarmHigh!=-1){
            stopMission();

             super.owc.setMissionAlarm(
                                    OneWireContainer41.TEMPERATURE_CHANNEL,
                                    TemperatureContainer.ALARM_HIGH,
                                    alarmHigh);
               super.owc.setMissionAlarmEnable(
                                    OneWireContainer41.TEMPERATURE_CHANNEL,
                                    TemperatureContainer.ALARM_HIGH,
                                    true);
        }else{
            super.owc.setMissionAlarmEnable(
                                    OneWireContainer41.TEMPERATURE_CHANNEL,
                                    TemperatureContainer.ALARM_HIGH,
                                    false);
        }
    }
    /**
     * Setting the temperature alarm for low values
     * @param alarmLow
     * @throws OneWireException
     */
    public void setTemperatureAlarmLow(double alarmLow) throws OneWireException{
        if(alarmLow!=-1){
            stopMission();

            super.owc.setMissionAlarm(
                                    OneWireContainer41.TEMPERATURE_CHANNEL,
                                    TemperatureContainer.ALARM_LOW,
                                    alarmLow);
               super.owc.setMissionAlarmEnable(
                                    OneWireContainer41.TEMPERATURE_CHANNEL,
                                    TemperatureContainer.ALARM_LOW,
                                    true);
        }else{
            super.owc.setMissionAlarmEnable(
                                    OneWireContainer41.TEMPERATURE_CHANNEL,
                                    TemperatureContainer.ALARM_LOW,
                                    false);
        }
    }

}
