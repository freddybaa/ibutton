/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Test.java
 *
 * Created on 08.mai.2012, 01:25:08
 */

package GUI;


import Ibutton.DeviceHandler.Hygrochron;
import Ibutton.DeviceHandler.Thermochron;
import com.dalsemi.onewire.OneWireException;
import com.dalsemi.onewire.container.OneWireContainer;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JList;

/**
 *
 * @author Baardsen
 */
public class GraphViewer extends javax.swing.JFrame {

    private Hygrochron hygrochron;
    private Thermochron thermochron;

    private Boolean HYGROCHRON = false;
    /** Creates new form Test */
    public GraphViewer(Object owc) throws OneWireException, Exception {

        initComponents();
        try{
            hygrochron = (Hygrochron) owc;
            HYGROCHRON = true;
        }catch(Exception e){
            thermochron = (Thermochron) owc;
        }

        setup();
        setSize(1024, 720);
        setVisible(true);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    private void setup() throws OneWireException, Exception{
        DefaultListModel graph_list = new DefaultListModel();
         if(HYGROCHRON){
            setTitle(hygrochron.getAlternativeName());
            hygrochron.readHumidity();
            hygrochron.readTemperatures();
            hygrochron.generateGraph();

            graph_list.addElement(hygrochron.HUMIDITY_GRAPH_NAME);
            graph_list.addElement(hygrochron.TEMPERATURE_GRAPH_NAME);
            graph_list.addElement(hygrochron.TEMP_HUM_GRAPH_NAME);

            graphs.setModel(graph_list);
         }else{
            setTitle(thermochron.getAlternativeName());
            thermochron.readTemperatures();
            thermochron.generateGraph();
            graph_list.addElement(thermochron.TEMPERATURE_GRAPH_NAME);
            graphs.setModel(graph_list);
         }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        graphs = new javax.swing.JList();
        picture = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        graphs.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                graphsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(graphs);

        jButton1.setText("Make Custom Graph");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(picture)
                    .addComponent(jButton1))
                .addContainerGap(593, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(picture)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 538, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated

    }//GEN-LAST:event_formWindowActivated

    private void graphsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_graphsValueChanged
        try {
            BufferedImage image;
                image = ImageIO.read(new File((String) graphs.getSelectedValue()));
                picture.setIcon(new ImageIcon(image));
            } catch (IOException ex) {
           
            }
    }//GEN-LAST:event_graphsValueChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(HYGROCHRON)
            try {
            try {
                new CustomGraph(hygrochron);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(GraphViewer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(GraphViewer.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (OneWireException ex) {
            Logger.getLogger(GraphViewer.class.getName()).log(Level.SEVERE, null, ex);
        }
        else
            try {
            try {
                new CustomGraph(thermochron);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(GraphViewer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(GraphViewer.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (OneWireException ex) {
            Logger.getLogger(GraphViewer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList graphs;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel picture;
    // End of variables declaration//GEN-END:variables

}
