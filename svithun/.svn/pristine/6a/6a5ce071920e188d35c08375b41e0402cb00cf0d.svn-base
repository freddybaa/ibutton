/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package Gnuplot;

import Gnuplot.Plot.Gnuplot;
import Gnuplot.Plot.GraphColor;
import Gnuplot.Plot.GnuplotDateFormat;
import Gnuplot.Plot.Plot;
import Gnuplot.Terminal.GnuplotTerminalPNG;
import Gnuplot.Terminal.GnuplotTerminal;


/**
 *
 * @author Baardsen
 */
public class Main {
    /**
     * Demostrating the gnuplot program
     * @param args
     * @throws Exception
     */
    public static void main(String [] args) throws Exception{
        Gnuplot gnuplot = new Gnuplot("K:\\GNUPLOT\\bin\\pgnuplot.exe");

        /**
         * Setting up the gnuplot terminal.
         * The default terminal under windows is 'windows',
         * under mac and unix it is 'wxt'
         *
         * This program supports currently:
         * GnuplotTerminalPNG, GnuplotTerminalPostScript, GnuplotTerminalSVG
         */
        GnuplotTerminal terminal = new GnuplotTerminalPNG();
        terminal.setSize("1200,800");
        gnuplot.setTerminal(terminal);

        /*
         * This is the dateformat object to used with textfiles with dates to plot.
         * Set the oldformat from the textfile and define the new output format

        GnuplotDateFormat dateformat = new GnuplotDateFormat();
        dateformat.setOldFormat("%d.%m.%y_%H:%M%S");
        dateformat.setOutputFormat("%d.%m.%y-%H:%M");
        gnuplot.setDateFormat(dateformat);
        */

        //setting the output name accordingly to the terminal type
        gnuplot.setOutputName("test.png");

        //displaying grid
        gnuplot.setGrid(true);

        //setting the xlabel of the graph
        gnuplot.setXLabel("XLABEL");
        //setting the ylabel of the graph
        gnuplot.setYLabel("YLABEL");
        //setting the title of the graph
        gnuplot.setTitle("Test graph");

        //low level function to speak with gnuplot directly
        //gnuplot.set("plot sin(x)");

        //plot the graph
        //gnuplot.plot();

        /*
         * Here you can predefine plots to be executed
         Plot p = new Plot("data1.dat","1:2",GraphColor.BLACK, "mygraph");
         gnuplot.plot(p);
         */

        //new dateformat
        GnuplotDateFormat dateformat = new GnuplotDateFormat();
        dateformat.setOldFormat("%d.%m.%y_%H:%M%S");
        dateformat.setOutputFormat("%d.%m.%y-%H:%M");
        //predefined plot using textfile 'data.dat'
        Plot p = new Plot("data.dat","1:2", GraphColor.BLUE, "my graph", dateformat);
        //plotting the predefined plot
        gnuplot.plot(p);
        
       
        /*
         * Example of multiple files to plot
         * 
        String [] files = {"data.dat", "data1.dat"};
        String [] lines = {"1:2","1:3"};
        String [] color = {GraphColor.BLACK, GraphColor.BLUE};
        String [] graphlabel = {"graph1","graph2"};
        Plot p2 = new Plot(files, lines, color, graphlabel);
        gnuplot.plot(p2);
        //System.out.println(p2.getPlotString());
         */
    }
}
