/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RealTimeMonitor.java
 *
 * Created on 08.mai.2012, 19:26:10
 */

package GUI;

import Ibutton.DeviceHandler.Hygrochron;
import Ibutton.DeviceHandler.Thermochron;
import com.dalsemi.onewire.OneWireException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;

/**
 *
 * @author Baardsen
 */
public class RealTimeMonitor extends javax.swing.JFrame {
    private Hygrochron hygrochron;
    private Thermochron thermochron;
    private boolean HYGROCHRON = false;

    private int missionInterval = 0;

    /**
     * Class for handeling the selection events based on the combobox.
     */
    private class GraphRender implements ActionListener{

        public void actionPerformed(ActionEvent e) {
            try {
                renderRealtime();
            } catch (IOException ex) {
                Logger.getLogger(RealTimeMonitor.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(RealTimeMonitor.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(RealTimeMonitor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        private void renderRealtime() throws IOException, InterruptedException, Exception{
            while(true){
                if(HYGROCHRON){
                    hygrochron.generateGraph();
                    drawImage();
                    Thread.sleep(hygrochron.getMissionSampleRate());
                }else{
                    thermochron.generateGraph();
                    drawImage();
                    Thread.sleep(thermochron.getMissionSampleRate());
                }
            }
        }

        private void drawImage() throws IOException{
           BufferedImage image = ImageIO.read(new File((String)graphChooser.getSelectedItem()));
           graphRealTime.setIcon(new ImageIcon(image));
        }

    }

    public RealTimeMonitor(Object owc) throws OneWireException, IOException, InterruptedException, Exception {
        initComponents();
        try{
            hygrochron = (Hygrochron) owc;
            HYGROCHRON = true;
        }catch(Exception e){
            thermochron = (Thermochron) owc;
        }

        setup();
        setVisible(true);
    }
 
    private void setup() throws OneWireException{
         DefaultComboBoxModel model = new DefaultComboBoxModel();
         if(HYGROCHRON){
              model.addElement(hygrochron.HUMIDITY_GRAPH_NAME);
              model.addElement(hygrochron.TEMPERATURE_GRAPH_NAME);
              model.addElement(hygrochron.TEMP_HUM_GRAPH_NAME);
         }else{
             model.addElement(thermochron.TEMPERATURE_GRAPH_NAME);
         }
         graphChooser.setModel(model);
         graphChooser.addActionListener(new GraphRender());
    }

    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        graphRealTime = new javax.swing.JLabel();
        graphChooser = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        graphRealTime.setText("jLabel1");

        graphChooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(graphChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(graphRealTime))
                .addContainerGap(1044, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(graphChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(graphRealTime)
                .addContainerGap(544, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox graphChooser;
    private javax.swing.JLabel graphRealTime;
    // End of variables declaration//GEN-END:variables

}
